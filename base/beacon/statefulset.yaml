apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: beacon
spec:
  serviceName: beacon
  replicas: 1
  selector:
    matchLabels:
      app: beacon
  template:
    metadata:
      labels:
        app: beacon
    spec:
      serviceAccountName: beacon
      terminationGracePeriodSeconds: 60
      volumes:
      - name: lighthouse-data
        emptyDir: {}
      - name: git-ssh-auth
        secret:
          secretName: gitlab-repo-ssh-key
          defaultMode: 0o400
      - name: jwtsecret-volume
        secret:
          secretName: jwtsecret
          defaultMode: 0o400
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: efs-claim

      initContainers:
      - name: wait-for-geth
        image: busybox:1.36
        command: [ 'sh', '-c', 'until nc -z -w 2 geth-0.geth 8551; do echo waiting for geth; sleep 2; done;' ]

      containers:
      - name: beacon
        image: sigp/lighthouse:latest-unstable
        command:
        - /bin/sh
        - -c
        args:
        - |
          set -e # Exit on error

          if [ -z "$EXTERNAL_IP" ]; then # This check will now use the value from ConfigMap
            echo "Error: EXTERNAL_IP variable not set from ConfigMap. Cannot start Geth."
            exit 1
          fi
          if [ -z "$EXTERNAL_PORT" ]; then # This check will now use the value from ConfigMap
            echo "Error: EXTERNAL_PORT variable not set from ConfigMap. Cannot start Geth."
            exit 1
          fi

          echo "Starting Beacon with --enr-address=${EXTERNAL_IP} --port=${EXTERNAL_PORT}"
          # Note: ${CHAIN_ID} will be expanded if CHAIN_ID is an environment variable available to this shell.
          # Ensure CHAIN_ID is correctly populated from the envFrom configMapRef.        
          exec lighthouse \
            beacon_node \
            --datadir=/data/consensus-data \
            --disable-peer-scoring \
            --disable-packet-filter \
            --enable-private-discovery \
            --staking \
            --http \
            --http-address=0.0.0.0 \
            --http-port=5052 \
            --validator-monitor-auto \
            --http-allow-origin=* \
            --listen-address=0.0.0.0 \
            --enr-address=${EXTERNAL_IP} \
            --enr-tcp-port=${EXTERNAL_PORT} \
            --enr-udp-port=${EXTERNAL_PORT} \
            --port=9000 \
            --discovery-port=9000 \
            --target-peers=100 \
            --testnet-dir=/data/config \
            --execution-endpoints=http://geth-0.geth:8551 \
            --jwt-secrets=/secret/jwtsecret \
            --suggested-fee-recipient=$(FEE_RECIPIENT) \
            --allow-insecure-genesis-sync \
            --metrics

        ports:
        - containerPort: 5052
          name: http
        - containerPort: 9000
          name: p2p-tcp
          protocol: TCP
        - containerPort: 9000
          name: p2p-udp
          protocol: UDP
        - containerPort: 5054
          name: metrics
          protocol: TCP
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: EXTERNAL_IP # The variable name your script expects
          valueFrom:
            configMapKeyRef:
              name: external-network-config # Name of the ConfigMap you created
              key: BEACON_EXTERNAL_IP # Key in the ConfigMap data
        - name: EXTERNAL_PORT # The variable name your script expects
          valueFrom:
            configMapKeyRef:
              name: external-network-config # Name of the ConfigMap
              key: BEACON_EXTERNAL_PORT
        envFrom:
        - configMapRef:
            name: env-vars # Load FEE_RECIPIENT etc.
        volumeMounts:
        - name: lighthouse-data # Mount lighthouse internal data PVC
          mountPath: /root/.lighthouse # Default path for lighthouse state
        - name: jwtsecret-volume
          mountPath: "/secret"
          readOnly: true
        - name: persistent-storage
          mountPath: /data
